Configurando o ambiente

git init
npm init -y

***Biblioteca que ajudar a realizar commits no padrao: chore, fix feat.. etc
npm i -D git-commit-msg-linter

***instalar typescript
npm i - D typescript @types/node
add o tsconfig --> usar o padrao do cra

***instalar o eslint u
npm i -D eslint eslint-config-standard-with-typescript eslint-plugin-import eslint-plugin-node eslint-plugin-promise eslint-plugin-standard @typescript-eslint/eslint-plugin

add eslintrc.json --> onde tera as regras do lint
add eslintignore --> onde ignore arquivos pro lint

*** add husk impede subir commit defeituosos
npm i -D lint-staged husky

add o arquivo .lintstagedrc.json --> pega todos os arquivos que vao entrar no proximo commit 
e em cima desses arquivos, eu quero aplicar alguns scripts. 
exemplo: antes de subir arquivos do tipo ts ou tsx rode tal script.. isso é configurado no .lintstagedrc.json

Husk --> add o arquivo huskyrc e no pre commit o husk chama o lint-staged que bate na conf do arquivo .lintstagedrc.json

add o scrip no package -->  "prepare": "husky install"
executa --> npm run prepare
cria o hook de pre commit --> npx husky add .husky/pre-commit "npx lint-staged"

** instalar o jest para typescript
npm i -D jest @types/jest ts-jest
add o arquivo --> jest.config


***  Instalando o Commitizen
O Commitizen é uma biblioteca que vai nos ajudar a criar os commits seguindo o padrão do Conventional Commit


